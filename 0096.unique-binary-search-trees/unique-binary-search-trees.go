package _096_unique_binary_search_trees

func numTrees(n int) int {
	// dp[n]: 从1到n为节点可以做成多少种二叉树
	// dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]
	// dp[3] 就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量
	// 元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量
	// 元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量
	// 元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量
	// dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]
	dp := make([]int, n+1)
	dp[0] = 1
	for i := 1; i <= n; i++ {
		for j := 1; j <= i; j++ {
			dp[i] += dp[i-j] * dp[j-1]
		}
	}

	return dp[n]
}
